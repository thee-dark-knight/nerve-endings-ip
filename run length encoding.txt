# Here is one way to do run length encoding (returns an alternating list of starting position and run lengths)
# The input is a list of pixel indices 
# e.g. 1,2,3,10,11,12,13,14 -> 1 3 10 5

rle <- function(idx) {
  
  if (length(idx) == 0) return("")
  
  # Make sure  values are sorted
  idx <- sort(idx)
  
  # Array of starting positions and run lengths
  starts <- c()
  runs <- c()
  
  # Loop
  starts <- c(starts, idx[1])
  run <- 1
  for (i in 2:length(idx)) { #run
    if (idx[i-1] + 1 == idx[i]) {
      run <- run + 1
    } else { #stop
      runs <- c(runs, run)
      starts <- c(starts, idx[i])
      run <- 1
    }
  }
  
  # Last run length needs special handling
  runs <- c(runs, run)
  
  # Sanity check
  stopifnot(length(starts) == length(runs))
  
  # zip starts and runs as space delimited list
  return(paste0(mapply(list, paste(starts, runs)), collapse = " "))
  
}

print(rle(c(1,2,3,10,11,12,13,14)))